{"version":3,"sources":["global/Entrypoint/Entrypoint.js","assets/images/danger-keep-out.jpg","pages/Home/index.js","pages/Home/Home.js","global/Entrypoint/index.js","serviceWorker.js","index.js"],"names":["hot","module","className","path","exact","exports","Home","src","constructionImage","alt","href","Entrypoint","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kIAAA,uEA0BeA,kBAAIC,EAAJD,EAhBf,WACE,OACE,yBAAKE,UAAU,cACb,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,IAAD,gB,wCCjBdH,EAAOI,QAAU,IAA0B,6C,6ECC5BC,ICGA,kBACb,yBAAKJ,UAAU,aACb,6BAAM,6BAAM,6BACZ,yBAAKK,IAAKC,IAAmBN,UAAU,WAAWO,IAAI,SACtD,6BACA,6DAGA,6BACA,yBAAKP,UAAU,aAAf,kBACiB,uBAAGQ,KAAK,oCAAR,8BAEjB,6BACA,6BACA,yBAAKR,UAAU,mBAAf,kBAEE,6BAFF,kE,+KCjBWS,G,YAAf,GCWoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SD2HlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0f17791a.chunk.js","sourcesContent":["import React from 'react';\nimport './Entrypoint.css';\nimport {hot} from 'react-hot-loader';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport Home from '../../pages/Home';\n\nfunction Entrypoint() {\n  return (\n    <div className=\"Entrypoint\">\n      <Router>\n        <div>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>  \n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default hot(module)(Entrypoint);\n","module.exports = __webpack_public_path__ + \"static/media/danger-keep-out.08951a60.jpg\";","import Home from './Home';\nexport default Home;\n","import React from 'react';\nimport './Home.css';\nimport constructionImage from '../../assets/images/danger-keep-out.jpg';\n\nexport default () => (\n  <div className=\"page-home\">\n    <br /><br /><br />\n    <img src={constructionImage} className=\"App-logo\" alt=\"logo\" />\n    <br />\n    <div>\n      &copy; 2019 Pahlawan Pte. Ltd.\n    </div>\n    <br />\n    <div className=\"enquiries\">\n      For enquiries: <a href=\"mailto:pahlawanenquiry@gmail.com\">pahlawanenquiry@gmail.com</a>\n    </div>\n    <br />\n    <br />\n    <div className=\"company-details\">\n      UEN: 201930010D\n      <br />\n      7, Mandai Link, #03-32, Mandai Connection, Singapore 728653\n    </div>\n  </div>\n);\n","import Entrypoint from './Entrypoint';\nexport default Entrypoint;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Entrypoint from './global/Entrypoint';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Entrypoint />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}